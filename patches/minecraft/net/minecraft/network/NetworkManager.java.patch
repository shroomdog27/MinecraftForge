--- a/net/minecraft/network/NetworkManager.java
+++ b/net/minecraft/network/NetworkManager.java
@@ -74,6 +_,7 @@
    private float field_211397_t;
    private int field_211398_u;
    private boolean field_211399_v;
+   private java.util.function.Consumer<NetworkManager> activationHandler;
 
    public NetworkManager(PacketDirection p_i46004_1_) {
       this.field_179294_g = p_i46004_1_;
@@ -83,6 +_,7 @@
       super.channelActive(p_channelActive_1_);
       this.field_150746_k = p_channelActive_1_.channel();
       this.field_150743_l = this.field_150746_k.remoteAddress();
+      if (activationHandler != null) activationHandler.accept(this);
 
       try {
          this.func_150723_a(ProtocolType.HANDSHAKING);
@@ -171,7 +_,7 @@
       ++this.field_211395_r;
       if (protocoltype1 != protocoltype) {
          field_150735_g.debug("Disabled auto read");
-         this.field_150746_k.config().setAutoRead(false);
+         this.field_150746_k.eventLoop().execute(()->this.field_150746_k.config().setAutoRead(false));
       }
 
       if (this.field_150746_k.eventLoop().inEventLoop()) {
@@ -248,6 +_,7 @@
    public void func_150718_a(ITextComponent p_150718_1_) {
       if (this.field_150746_k.isOpen()) {
          this.field_150746_k.close().awaitUninterruptibly();
+         field_150735_g.debug("Disconnecting " + this.field_150743_l.toString(), new java.io.IOException());
          this.field_150742_o = p_150718_1_;
       }
 
@@ -259,7 +_,9 @@
 
    @OnlyIn(Dist.CLIENT)
    public static NetworkManager func_181124_a(InetAddress p_181124_0_, int p_181124_1_, boolean p_181124_2_) {
+      if (p_181124_0_ instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
       final NetworkManager networkmanager = new NetworkManager(PacketDirection.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       LazyValue<? extends EventLoopGroup> lazyvalue;
       if (Epoll.isAvailable() && p_181124_2_) {
@@ -275,9 +_,10 @@
             try {
                p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, true);
             } catch (ChannelException channelexception) {
+                field_150735_g.debug("Recieved ChannelException for InetAddress " + p_181124_0_, channelexception);
             }
 
-            p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("splitter", new NettyVarint21FrameDecoder()).addLast("decoder", new NettyPacketDecoder(PacketDirection.CLIENTBOUND)).addLast("prepender", new NettyVarint21FrameEncoder()).addLast("encoder", new NettyPacketEncoder(PacketDirection.SERVERBOUND)).addLast("packet_handler", networkmanager);
+            p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(30, java.util.concurrent.TimeUnit.MINUTES)).addLast("splitter", new NettyVarint21FrameDecoder()).addLast("decoder", new NettyPacketDecoder(PacketDirection.CLIENTBOUND)).addLast("prepender", new NettyVarint21FrameEncoder()).addLast("encoder", new NettyPacketEncoder(PacketDirection.SERVERBOUND)).addLast("packet_handler", networkmanager);
          }
       }).channel(oclass).connect(p_181124_0_, p_181124_1_).syncUninterruptibly();
       return networkmanager;
@@ -286,6 +_,7 @@
    @OnlyIn(Dist.CLIENT)
    public static NetworkManager func_150722_a(SocketAddress p_150722_0_) {
       final NetworkManager networkmanager = new NetworkManager(PacketDirection.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(field_179296_e.func_179281_c()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_initChannel_1_) throws Exception {
             p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
@@ -374,6 +_,14 @@
    @OnlyIn(Dist.CLIENT)
    public float func_211390_n() {
       return this.field_211397_t;
+   }
+
+   public Channel channel() {
+      return field_150746_k;
+   }
+
+   public PacketDirection getDirection() {
+      return this.field_179294_g;
    }
 
    static class QueuedPacket {
